#!/usr/bin/env python3
"""Control Energenie switches using MQTT."""
import argparse
import dataclasses
import json

import gpiozero
import paho.mqtt.client as mqtt

from typing import Any, Callable, Dict, List


@dataclasses.dataclass
class Switch:
    name: str
    topic: str
    switch: int
    payload_on: str
    payload_off: str

    @classmethod
    def from_dict(cls, d: Dict[str, Any]) -> 'Switch':
        return cls(**d)


@dataclasses.dataclass
class Config:
    broker_host: str
    broker_port: int

    switches: List[Switch]

    @classmethod
    def from_dict(cls, d: Dict[str, Any]) -> 'Config':
        d['switches'] = [Switch.from_dict(sd) for sd in d['switches']]
        return cls(**d)


def on_connect(client, userdata, flags, return_code):
    print(f'connected')


def on_disconnect(client, userdata, flags, return_code):
    print(f'disconnected')


def on_message(name: str, switch: int, payload_on: str, payload_off: str) -> Callable:
    energenie = gpiozero.Energenie(switch)

    def callback(client, userdata, message):
        state = message.payload.decode()
        if state == payload_on:
            energenie.on()
            print(f'{name}: setting on')
        elif state == payload_off:
            energenie.off()
            print(f'{name}: setting off')
        else:
            print(f'{name}: unknown state: {state}')
    return callback


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--config', type=argparse.FileType('r'),
                        required=True, help='path to config JSON')
    args = parser.parse_args()

    config = Config.from_dict(json.load(args.config))

    client = mqtt.Client()
    client.on_connect = on_connect
    client.on_disconnect = on_disconnect
    client.connect(config.broker_host, config.broker_port)
    for switch in config.switches:
        client.subscribe(switch.topic)
        client.message_callback_add(switch.topic, on_message(
            switch.name, switch.switch, switch.payload_on, switch.payload_off))
    client.loop_forever()
